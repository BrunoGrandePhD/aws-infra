Description: Essential resources common to all AWS accounts
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  OperatorEmail:
    Type: String
  FhcrcVpnCidrip:
    Type: String
    NoEcho: true
  VpcPeeringRequesterAwsAccountId:
    Type: String
    NoEcho: true
    Description: The AWS account running the Sophos-VPN
    AllowedPattern: '[0-9]*'
    ConstraintDescription: Must be account number without dashes
Resources:
  # resources for cloudtrail
  AWSLogsCloudtrailLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/cloudtrail/${AWS::StackName}.log'
      RetentionInDays: 90
  AWSS3CloudtrailBucket:
    DeletionPolicy: Retain
    Type: "AWS::S3::Bucket"
    Properties: {}
  AWSIAMS3CloudtrailBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref AWSS3CloudtrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource:
              !Sub |-
                arn:aws:s3:::${AWSS3CloudtrailBucket}
          -
            Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${AWSS3CloudtrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"
  AWSSNSCloudtrailTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSSNSCloudtrailTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      Topics:
        - !Ref AWSSNSCloudtrailTopic
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          -
            Sid: "CloudtrailTopicPolicy"
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Resource: "*"
            Action: "SNS:Publish"
  AWSIAMCloudtrailLogManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSCloudTrailCreateLogStream
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWSLogsCloudtrailLogGroup}:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*'
          - Sid: AWSCloudTrailPutLogEvents
            Effect: Allow
            Action:
              - 'logs:PutLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWSLogsCloudtrailLogGroup}:log-stream:${AWS::AccountId}_CloudTrail_${AWS::Region}*'
  AWSIAMCloudtrailLogRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "cloudtrail.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref AWSIAMCloudtrailLogManagedPolicy
  AWSCloudtrailTrail:
    DependsOn:
      - AWSLogsCloudtrailLogGroup
      - AWSIAMS3CloudtrailBucketPolicy
      - AWSSNSCloudtrailTopicPolicy
      - AWSIAMCloudtrailLogRole
    Type: "AWS::CloudTrail::Trail"
    Properties:
      CloudWatchLogsLogGroupArn: !GetAtt AWSLogsCloudtrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt AWSIAMCloudtrailLogRole.Arn
      # send all logs to cloudtrail bucket in AWS logcentral account
      S3BucketName: "essentials-awss3cloudtrailbucket-1jz6pf8dzid7r"
      SnsTopicName: !GetAtt AWSSNSCloudtrailTopic.TopicName
      IsLogging: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
  # Monitor Cloudformation deployments
  # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-rollback-email/
  AWSSNSCloudformationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSIAMCloudformationTopicPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: "CloudformationSnsPolicy"
            Effect: "Allow"
            Resource: !Ref AWSSNSCloudformationTopic
            Action: "SNS:Publish"
          -
            Sid: "CloudformationLogsPolicy"
            Effect: "Allow"
            Resource: "arn:aws:logs:*:*:*"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
  AWSIAMCloudformationLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Ref AWSIAMCloudformationTopicPolicy
  AWSLambaCloudformationFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt AWSIAMCloudformationLambdaRole.Arn
      Runtime: "nodejs4.3"
      Environment:
        Variables:
          CloudformationTopicArn: !Ref AWSSNSCloudformationTopic
      Code:
        ZipFile: >
          topic_arn = process.env.CloudformationTopicArn;
          var AWS = require('aws-sdk');
          AWS.config.region_array = topic_arn.split(':'); // splits the ARN in to and array
          AWS.config.region = AWS.config.region_array[3];  // makes the 4th variable in the array (will always be the region)


          // ####################   BEGIN LOGGING   ########################

          console.log(topic_arn);   // just for logging to the that the var was parsed correctly
          console.log(AWS.config.region_array); // to see if the SPLIT command worked
          console.log(AWS.config.region_array[3]); // to see if it got the region correctly
          console.log(AWS.config.region); // to confirm that it set the AWS.config.region to the correct region from the ARN

          // ####################  END LOGGING (you can remove this logging section)  ########################


          exports.handler = function(event, context) {
              console.log(event.Records[0]);
              const message = event.Records[0].Sns.Message;
              if (message.indexOf("UPDATE_ROLLBACK") > -1) {
                  var fields = message.split("\n");
                  subject = fields[11].replace(/['']+/g, '');
                  send_SNS_notification(subject, message);
              }
          };

          function send_SNS_notification(subject, message) {
              var sns = new AWS.SNS();
              subject = "ALARM:" + subject + " failed a cloudformation deployment";
              sns.publish({
                  Subject: subject,
                  Message: message,
                  TopicArn: topic_arn
              }, function(err, data) {
                  if (err) {
                      console.log(err.stack);
                      return;
                  }
                  console.log('push sent');
                  console.log(data);
              });
          };
  AWSSNSCloudformationNotifyLambdaTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !GetAtt AWSLambaCloudformationFunction.Arn
          Protocol: lambda
  AWSLambdaCloudformationNotifyInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt AWSLambaCloudformationFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref AWSSNSCloudformationNotifyLambdaTopic
  # AWS Config service, https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/Config/Config.yaml
  AWSConfigConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
      RoleARN: !GetAtt [AWSIAMConfigRole, Arn]
  AWSConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      S3BucketName: !Ref 'AWSS3ConfigBucket'
  AWSS3ConfigBucket:
    Type: AWS::S3::Bucket
  AWSS3LambdaArtifactsBucket:
    Type: AWS::S3::Bucket
  AWSSnsConfigTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
          Endpoint: !Ref OperatorEmail
          Protocol: email
  AWSSnsConfigTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ConfigTopicPolicy
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: config.amazonaws.com
          Action: SNS:Publish
          Resource: '*'
      Topics: [!Ref 'AWSSnsConfigTopic']
  AWSIAMConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [config.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSConfigRole']
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:GetBucketAcl
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AWSS3ConfigBucket']]
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'AWSS3ConfigBucket', /AWSLogs/,
                !Ref 'AWS::AccountId', /*]]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Effect: Allow
            Action: config:Put*
            Resource: '*'
  # https://docs.aws.amazon.com/config/latest/developerguide/cloudtrail-enabled.html
  AWSConfigCloudtrailEnabledConfigRule:
    Type: 'AWS::Config::ConfigRule'
    DependsOn: AWSConfigConfigurationRecorder
    Properties:
      Description: Checks whether AWS CloudTrail is enabled.
      InputParameters:
        s3BucketName: !Ref AWSS3CloudtrailBucket
        snsTopicArn: !Ref AWSSNSCloudtrailTopic
        cloudWatchLogsLogGroupArn: !GetAtt AWSLogsCloudtrailLogGroup.Arn
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENABLED
      MaximumExecutionFrequency: TwentyFour_Hours
  # Create a role to authorize the VPC Peering request from a specific account,
  # this is used to create the VPC Peer between different accounts in  CloudFormation
  # https://github.com/awslabs/aws-cloudformation-templates/tree/master/aws/solutions/VPCPeering
  VPCPeeringAuthorizerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref VpcPeeringRequesterAwsAccountId
                  - ':root'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: VPCAuthorizer
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AcceptVpcPeeringConnection'
                Resource:
                  - '*'
Outputs:
  AWSS3CloudtrailBucket:
    Value: !Ref AWSS3CloudtrailBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudtrailBucket'
  AWSS3ConfigBucket:
    Value: !Ref AWSS3ConfigBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-AwsConfigBucket'
  AWSS3LambdaArtifactsBucket:
    Value: !Ref AWSS3LambdaArtifactsBucket
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LambdaArtifactsBucket'
  FhcrcVpnCidrip:
    Value: !Ref FhcrcVpnCidrip
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-FhcrcVpnCidrip'
  AWSLambaCloudformationFunction:
    Value: !Ref AWSLambaCloudformationFunction
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-LambaCloudformationFunction'
  AWSSNSCloudformationTopic:
    Value: !Ref AWSSNSCloudformationTopic
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudformationTopic'
  AWSSNSCloudformationNotifyLambdaTopic:
    Value: !Ref AWSSNSCloudformationNotifyLambdaTopic
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-CloudformationNotifyLambdaTopicArn'
  VPCPeeringAuthorizerRole:
    Description: Cross Account Role Name
    Value: !Ref VPCPeeringAuthorizerRole
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-VPCPeeringAuthorizerRole'
